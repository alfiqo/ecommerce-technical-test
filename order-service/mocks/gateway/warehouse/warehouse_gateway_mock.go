// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/gateway/warehouse/interface.go

// Package warehouse_mock is a generated GoMock package.
package warehouse_mock

import (
	context "context"
	entity "order-service/internal/entity"
	warehouse "order-service/internal/gateway/warehouse"
	model "order-service/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWarehouseGatewayInterface is a mock of WarehouseGatewayInterface interface.
type MockWarehouseGatewayInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseGatewayInterfaceMockRecorder
}

// MockWarehouseGatewayInterfaceMockRecorder is the mock recorder for MockWarehouseGatewayInterface.
type MockWarehouseGatewayInterfaceMockRecorder struct {
	mock *MockWarehouseGatewayInterface
}

// NewMockWarehouseGatewayInterface creates a new mock instance.
func NewMockWarehouseGatewayInterface(ctrl *gomock.Controller) *MockWarehouseGatewayInterface {
	mock := &MockWarehouseGatewayInterface{ctrl: ctrl}
	mock.recorder = &MockWarehouseGatewayInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouseGatewayInterface) EXPECT() *MockWarehouseGatewayInterfaceMockRecorder {
	return m.recorder
}

// CheckAndReserveStock mocks base method.
func (m *MockWarehouseGatewayInterface) CheckAndReserveStock(ctx context.Context, orderID uint, items []model.OrderItemRequest, reserveUntil string) (*warehouse.ReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndReserveStock", ctx, orderID, items, reserveUntil)
	ret0, _ := ret[0].(*warehouse.ReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAndReserveStock indicates an expected call of CheckAndReserveStock.
func (mr *MockWarehouseGatewayInterfaceMockRecorder) CheckAndReserveStock(ctx, orderID, items, reserveUntil interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndReserveStock", reflect.TypeOf((*MockWarehouseGatewayInterface)(nil).CheckAndReserveStock), ctx, orderID, items, reserveUntil)
}

// ConfirmStockDeduction mocks base method.
func (m *MockWarehouseGatewayInterface) ConfirmStockDeduction(ctx context.Context, orderID uint, reservationID string) (*warehouse.StockOperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmStockDeduction", ctx, orderID, reservationID)
	ret0, _ := ret[0].(*warehouse.StockOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmStockDeduction indicates an expected call of ConfirmStockDeduction.
func (mr *MockWarehouseGatewayInterfaceMockRecorder) ConfirmStockDeduction(ctx, orderID, reservationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmStockDeduction", reflect.TypeOf((*MockWarehouseGatewayInterface)(nil).ConfirmStockDeduction), ctx, orderID, reservationID)
}

// GetInventory mocks base method.
func (m *MockWarehouseGatewayInterface) GetInventory(ctx context.Context, productID, warehouseID uint) (*warehouse.InventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", ctx, productID, warehouseID)
	ret0, _ := ret[0].(*warehouse.InventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockWarehouseGatewayInterfaceMockRecorder) GetInventory(ctx, productID, warehouseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockWarehouseGatewayInterface)(nil).GetInventory), ctx, productID, warehouseID)
}

// GetInventoryBatch mocks base method.
func (m *MockWarehouseGatewayInterface) GetInventoryBatch(ctx context.Context, items []warehouse.InventoryQuery) (map[string]*warehouse.InventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventoryBatch", ctx, items)
	ret0, _ := ret[0].(map[string]*warehouse.InventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventoryBatch indicates an expected call of GetInventoryBatch.
func (mr *MockWarehouseGatewayInterfaceMockRecorder) GetInventoryBatch(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventoryBatch", reflect.TypeOf((*MockWarehouseGatewayInterface)(nil).GetInventoryBatch), ctx, items)
}

// ReleaseReservation mocks base method.
func (m *MockWarehouseGatewayInterface) ReleaseReservation(ctx context.Context, orderID uint, reservationID string) (*warehouse.StockOperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseReservation", ctx, orderID, reservationID)
	ret0, _ := ret[0].(*warehouse.StockOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseReservation indicates an expected call of ReleaseReservation.
func (mr *MockWarehouseGatewayInterfaceMockRecorder) ReleaseReservation(ctx, orderID, reservationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseReservation", reflect.TypeOf((*MockWarehouseGatewayInterface)(nil).ReleaseReservation), ctx, orderID, reservationID)
}

// UpdateInventory mocks base method.
func (m *MockWarehouseGatewayInterface) UpdateInventory(ctx context.Context, inventory *entity.Inventory) (*warehouse.StockOperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInventory", ctx, inventory)
	ret0, _ := ret[0].(*warehouse.StockOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInventory indicates an expected call of UpdateInventory.
func (mr *MockWarehouseGatewayInterfaceMockRecorder) UpdateInventory(ctx, inventory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInventory", reflect.TypeOf((*MockWarehouseGatewayInterface)(nil).UpdateInventory), ctx, inventory)
}
