// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/interface.go

// Package usecase_mock is a generated GoMock package.
package usecase_mock

import (
	context "context"
	entity "order-service/internal/entity"
	model "order-service/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInventoryUseCaseInterface is a mock of InventoryUseCaseInterface interface.
type MockInventoryUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryUseCaseInterfaceMockRecorder
}

// MockInventoryUseCaseInterfaceMockRecorder is the mock recorder for MockInventoryUseCaseInterface.
type MockInventoryUseCaseInterfaceMockRecorder struct {
	mock *MockInventoryUseCaseInterface
}

// NewMockInventoryUseCaseInterface creates a new mock instance.
func NewMockInventoryUseCaseInterface(ctrl *gomock.Controller) *MockInventoryUseCaseInterface {
	mock := &MockInventoryUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockInventoryUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryUseCaseInterface) EXPECT() *MockInventoryUseCaseInterfaceMockRecorder {
	return m.recorder
}

// CheckAndReserveStock mocks base method.
func (m *MockInventoryUseCaseInterface) CheckAndReserveStock(ctx context.Context, items []model.OrderItemRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndReserveStock", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAndReserveStock indicates an expected call of CheckAndReserveStock.
func (mr *MockInventoryUseCaseInterfaceMockRecorder) CheckAndReserveStock(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndReserveStock", reflect.TypeOf((*MockInventoryUseCaseInterface)(nil).CheckAndReserveStock), ctx, items)
}

// ConfirmStockDeduction mocks base method.
func (m *MockInventoryUseCaseInterface) ConfirmStockDeduction(ctx context.Context, orderItems []entity.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmStockDeduction", ctx, orderItems)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmStockDeduction indicates an expected call of ConfirmStockDeduction.
func (mr *MockInventoryUseCaseInterfaceMockRecorder) ConfirmStockDeduction(ctx, orderItems interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmStockDeduction", reflect.TypeOf((*MockInventoryUseCaseInterface)(nil).ConfirmStockDeduction), ctx, orderItems)
}

// GetInventory mocks base method.
func (m *MockInventoryUseCaseInterface) GetInventory(ctx context.Context, productID, warehouseID uint) (*entity.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", ctx, productID, warehouseID)
	ret0, _ := ret[0].(*entity.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockInventoryUseCaseInterfaceMockRecorder) GetInventory(ctx, productID, warehouseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockInventoryUseCaseInterface)(nil).GetInventory), ctx, productID, warehouseID)
}

// ReleaseReservation mocks base method.
func (m *MockInventoryUseCaseInterface) ReleaseReservation(ctx context.Context, orderItems []entity.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseReservation", ctx, orderItems)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseReservation indicates an expected call of ReleaseReservation.
func (mr *MockInventoryUseCaseInterfaceMockRecorder) ReleaseReservation(ctx, orderItems interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseReservation", reflect.TypeOf((*MockInventoryUseCaseInterface)(nil).ReleaseReservation), ctx, orderItems)
}

// UpdateInventory mocks base method.
func (m *MockInventoryUseCaseInterface) UpdateInventory(ctx context.Context, inventory *entity.Inventory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInventory", ctx, inventory)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInventory indicates an expected call of UpdateInventory.
func (mr *MockInventoryUseCaseInterfaceMockRecorder) UpdateInventory(ctx, inventory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInventory", reflect.TypeOf((*MockInventoryUseCaseInterface)(nil).UpdateInventory), ctx, inventory)
}
