// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/order_usecase.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/order_usecase.go -destination=./mocks/usecase/order_usecase_mock.go -package=usecase_mock
//

// Package usecase_mock is a generated GoMock package.
package usecase_mock

import (
	context "context"
	model "order-service/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderUseCaseInterface is a mock of OrderUseCaseInterface interface.
type MockOrderUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockOrderUseCaseInterfaceMockRecorder is the mock recorder for MockOrderUseCaseInterface.
type MockOrderUseCaseInterfaceMockRecorder struct {
	mock *MockOrderUseCaseInterface
}

// NewMockOrderUseCaseInterface creates a new mock instance.
func NewMockOrderUseCaseInterface(ctrl *gomock.Controller) *MockOrderUseCaseInterface {
	mock := &MockOrderUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockOrderUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUseCaseInterface) EXPECT() *MockOrderUseCaseInterfaceMockRecorder {
	return m.recorder
}

// CancelExpiredOrders mocks base method.
func (m *MockOrderUseCaseInterface) CancelExpiredOrders(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelExpiredOrders", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelExpiredOrders indicates an expected call of CancelExpiredOrders.
func (mr *MockOrderUseCaseInterfaceMockRecorder) CancelExpiredOrders(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelExpiredOrders", reflect.TypeOf((*MockOrderUseCaseInterface)(nil).CancelExpiredOrders), ctx)
}

// CreateOrder mocks base method.
func (m *MockOrderUseCaseInterface) CreateOrder(ctx context.Context, request *model.CreateOrderRequest) (*model.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, request)
	ret0, _ := ret[0].(*model.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderUseCaseInterfaceMockRecorder) CreateOrder(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderUseCaseInterface)(nil).CreateOrder), ctx, request)
}

// GetOrderByID mocks base method.
func (m *MockOrderUseCaseInterface) GetOrderByID(ctx context.Context, orderID uint) (*model.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, orderID)
	ret0, _ := ret[0].(*model.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderUseCaseInterfaceMockRecorder) GetOrderByID(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderUseCaseInterface)(nil).GetOrderByID), ctx, orderID)
}

// GetOrdersByUserID mocks base method.
func (m *MockOrderUseCaseInterface) GetOrdersByUserID(ctx context.Context, userID string, page, limit int) ([]model.OrderResponse, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", ctx, userID, page, limit)
	ret0, _ := ret[0].([]model.OrderResponse)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockOrderUseCaseInterfaceMockRecorder) GetOrdersByUserID(ctx, userID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockOrderUseCaseInterface)(nil).GetOrdersByUserID), ctx, userID, page, limit)
}

// ProcessPayment mocks base method.
func (m *MockOrderUseCaseInterface) ProcessPayment(ctx context.Context, orderID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockOrderUseCaseInterfaceMockRecorder) ProcessPayment(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockOrderUseCaseInterface)(nil).ProcessPayment), ctx, orderID)
}

// UpdateOrderStatus mocks base method.
func (m *MockOrderUseCaseInterface) UpdateOrderStatus(ctx context.Context, orderID uint, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrderUseCaseInterfaceMockRecorder) UpdateOrderStatus(ctx, orderID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderUseCaseInterface)(nil).UpdateOrderStatus), ctx, orderID, status)
}
