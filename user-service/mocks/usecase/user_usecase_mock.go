// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/user_usecase.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/user_usecase.go -destination=./mocks/usecase/user_usecase_mock.go -package=usecase_mock
//

// Package usecase_mock is a generated GoMock package.
package usecase_mock

import (
	context "context"
	reflect "reflect"
	model "user-service/internal/model"

	gomock "go.uber.org/mock/gomock"
)

// MockUserUseCaseInterface is a mock of UserUseCaseInterface interface.
type MockUserUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockUserUseCaseInterfaceMockRecorder is the mock recorder for MockUserUseCaseInterface.
type MockUserUseCaseInterfaceMockRecorder struct {
	mock *MockUserUseCaseInterface
}

// NewMockUserUseCaseInterface creates a new mock instance.
func NewMockUserUseCaseInterface(ctrl *gomock.Controller) *MockUserUseCaseInterface {
	mock := &MockUserUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCaseInterface) EXPECT() *MockUserUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserUseCaseInterface) Create(ctx context.Context, request *model.RegisterUserRequest) (*model.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(*model.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserUseCaseInterfaceMockRecorder) Create(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserUseCaseInterface)(nil).Create), ctx, request)
}

// Login mocks base method.
func (m *MockUserUseCaseInterface) Login(ctx context.Context, request *model.LoginUserRequest) (*model.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, request)
	ret0, _ := ret[0].(*model.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserUseCaseInterfaceMockRecorder) Login(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUseCaseInterface)(nil).Login), ctx, request)
}
