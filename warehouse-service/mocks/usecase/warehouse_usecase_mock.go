// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/warehouse_usecase.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/warehouse_usecase.go -destination=./mocks/usecase/warehouse_usecase_mock.go -package=usecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"
	model "warehouse-service/internal/model"

	gomock "go.uber.org/mock/gomock"
)

// MockWarehouseUseCaseInterface is a mock of WarehouseUseCaseInterface interface.
type MockWarehouseUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockWarehouseUseCaseInterfaceMockRecorder is the mock recorder for MockWarehouseUseCaseInterface.
type MockWarehouseUseCaseInterfaceMockRecorder struct {
	mock *MockWarehouseUseCaseInterface
}

// NewMockWarehouseUseCaseInterface creates a new mock instance.
func NewMockWarehouseUseCaseInterface(ctrl *gomock.Controller) *MockWarehouseUseCaseInterface {
	mock := &MockWarehouseUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockWarehouseUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouseUseCaseInterface) EXPECT() *MockWarehouseUseCaseInterfaceMockRecorder {
	return m.recorder
}

// CreateWarehouse mocks base method.
func (m *MockWarehouseUseCaseInterface) CreateWarehouse(ctx context.Context, request *model.CreateWarehouseRequest) (*model.WarehouseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWarehouse", ctx, request)
	ret0, _ := ret[0].(*model.WarehouseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWarehouse indicates an expected call of CreateWarehouse.
func (mr *MockWarehouseUseCaseInterfaceMockRecorder) CreateWarehouse(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWarehouse", reflect.TypeOf((*MockWarehouseUseCaseInterface)(nil).CreateWarehouse), ctx, request)
}

// DeleteWarehouse mocks base method.
func (m *MockWarehouseUseCaseInterface) DeleteWarehouse(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWarehouse", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWarehouse indicates an expected call of DeleteWarehouse.
func (mr *MockWarehouseUseCaseInterfaceMockRecorder) DeleteWarehouse(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWarehouse", reflect.TypeOf((*MockWarehouseUseCaseInterface)(nil).DeleteWarehouse), ctx, id)
}

// GetWarehouse mocks base method.
func (m *MockWarehouseUseCaseInterface) GetWarehouse(ctx context.Context, id uint) (*model.WarehouseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarehouse", ctx, id)
	ret0, _ := ret[0].(*model.WarehouseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarehouse indicates an expected call of GetWarehouse.
func (mr *MockWarehouseUseCaseInterfaceMockRecorder) GetWarehouse(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarehouse", reflect.TypeOf((*MockWarehouseUseCaseInterface)(nil).GetWarehouse), ctx, id)
}

// ListWarehouses mocks base method.
func (m *MockWarehouseUseCaseInterface) ListWarehouses(ctx context.Context, request *model.ListWarehouseRequest) (*model.WarehouseListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWarehouses", ctx, request)
	ret0, _ := ret[0].(*model.WarehouseListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWarehouses indicates an expected call of ListWarehouses.
func (mr *MockWarehouseUseCaseInterfaceMockRecorder) ListWarehouses(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWarehouses", reflect.TypeOf((*MockWarehouseUseCaseInterface)(nil).ListWarehouses), ctx, request)
}

// UpdateWarehouse mocks base method.
func (m *MockWarehouseUseCaseInterface) UpdateWarehouse(ctx context.Context, request *model.UpdateWarehouseRequest) (*model.WarehouseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWarehouse", ctx, request)
	ret0, _ := ret[0].(*model.WarehouseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWarehouse indicates an expected call of UpdateWarehouse.
func (mr *MockWarehouseUseCaseInterfaceMockRecorder) UpdateWarehouse(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWarehouse", reflect.TypeOf((*MockWarehouseUseCaseInterface)(nil).UpdateWarehouse), ctx, request)
}
