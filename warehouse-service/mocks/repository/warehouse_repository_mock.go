// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/warehouse_repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/warehouse_repository.go -destination=./mocks/repository/warehouse_repository_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	entity "warehouse-service/internal/entity"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockWarehouseRepositoryInterface is a mock of WarehouseRepositoryInterface interface.
type MockWarehouseRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockWarehouseRepositoryInterfaceMockRecorder is the mock recorder for MockWarehouseRepositoryInterface.
type MockWarehouseRepositoryInterfaceMockRecorder struct {
	mock *MockWarehouseRepositoryInterface
}

// NewMockWarehouseRepositoryInterface creates a new mock instance.
func NewMockWarehouseRepositoryInterface(ctrl *gomock.Controller) *MockWarehouseRepositoryInterface {
	mock := &MockWarehouseRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockWarehouseRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouseRepositoryInterface) EXPECT() *MockWarehouseRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWarehouseRepositoryInterface) Create(db *gorm.DB, warehouse *entity.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", db, warehouse)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWarehouseRepositoryInterfaceMockRecorder) Create(db, warehouse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWarehouseRepositoryInterface)(nil).Create), db, warehouse)
}

// Delete mocks base method.
func (m *MockWarehouseRepositoryInterface) Delete(db *gorm.DB, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWarehouseRepositoryInterfaceMockRecorder) Delete(db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWarehouseRepositoryInterface)(nil).Delete), db, id)
}

// FindByID mocks base method.
func (m *MockWarehouseRepositoryInterface) FindByID(db *gorm.DB, id uint) (*entity.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", db, id)
	ret0, _ := ret[0].(*entity.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockWarehouseRepositoryInterfaceMockRecorder) FindByID(db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockWarehouseRepositoryInterface)(nil).FindByID), db, id)
}

// GetProductCount mocks base method.
func (m *MockWarehouseRepositoryInterface) GetProductCount(db *gorm.DB, warehouseID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCount", db, warehouseID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCount indicates an expected call of GetProductCount.
func (mr *MockWarehouseRepositoryInterfaceMockRecorder) GetProductCount(db, warehouseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCount", reflect.TypeOf((*MockWarehouseRepositoryInterface)(nil).GetProductCount), db, warehouseID)
}

// GetTotalItemCount mocks base method.
func (m *MockWarehouseRepositoryInterface) GetTotalItemCount(db *gorm.DB, warehouseID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalItemCount", db, warehouseID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalItemCount indicates an expected call of GetTotalItemCount.
func (mr *MockWarehouseRepositoryInterfaceMockRecorder) GetTotalItemCount(db, warehouseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalItemCount", reflect.TypeOf((*MockWarehouseRepositoryInterface)(nil).GetTotalItemCount), db, warehouseID)
}

// GetWarehouseStock mocks base method.
func (m *MockWarehouseRepositoryInterface) GetWarehouseStock(db *gorm.DB, warehouseID, productID uint) (*entity.WarehouseStock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarehouseStock", db, warehouseID, productID)
	ret0, _ := ret[0].(*entity.WarehouseStock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarehouseStock indicates an expected call of GetWarehouseStock.
func (mr *MockWarehouseRepositoryInterfaceMockRecorder) GetWarehouseStock(db, warehouseID, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarehouseStock", reflect.TypeOf((*MockWarehouseRepositoryInterface)(nil).GetWarehouseStock), db, warehouseID, productID)
}

// List mocks base method.
func (m *MockWarehouseRepositoryInterface) List(db *gorm.DB, limit, offset int) ([]entity.Warehouse, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", db, limit, offset)
	ret0, _ := ret[0].([]entity.Warehouse)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockWarehouseRepositoryInterfaceMockRecorder) List(db, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWarehouseRepositoryInterface)(nil).List), db, limit, offset)
}

// ListWarehouseStock mocks base method.
func (m *MockWarehouseRepositoryInterface) ListWarehouseStock(db *gorm.DB, warehouseID uint, limit, offset int) ([]entity.WarehouseStock, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWarehouseStock", db, warehouseID, limit, offset)
	ret0, _ := ret[0].([]entity.WarehouseStock)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWarehouseStock indicates an expected call of ListWarehouseStock.
func (mr *MockWarehouseRepositoryInterfaceMockRecorder) ListWarehouseStock(db, warehouseID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWarehouseStock", reflect.TypeOf((*MockWarehouseRepositoryInterface)(nil).ListWarehouseStock), db, warehouseID, limit, offset)
}

// Update mocks base method.
func (m *MockWarehouseRepositoryInterface) Update(db *gorm.DB, warehouse *entity.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", db, warehouse)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWarehouseRepositoryInterfaceMockRecorder) Update(db, warehouse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWarehouseRepositoryInterface)(nil).Update), db, warehouse)
}

// UpdateStock mocks base method.
func (m *MockWarehouseRepositoryInterface) UpdateStock(db *gorm.DB, stock *entity.WarehouseStock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStock", db, stock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStock indicates an expected call of UpdateStock.
func (mr *MockWarehouseRepositoryInterfaceMockRecorder) UpdateStock(db, stock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStock", reflect.TypeOf((*MockWarehouseRepositoryInterface)(nil).UpdateStock), db, stock)
}
